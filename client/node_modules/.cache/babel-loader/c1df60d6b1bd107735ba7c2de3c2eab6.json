{"ast":null,"code":"var _jsxFileName = \"/Users/sumant/Desktop/work/beep/client/src/App.js\";\nimport React from 'react';\nimport { ChakraProvider, Box, Text, Link, VStack, Code, Grid, theme } from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport ReactApexChart from 'apexcharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      temperature: 0,\n      breathing: [],\n      timer: 0,\n      series: [{\n        data: this.breathing.slice()\n      }],\n      options: {\n        chart: {\n          id: 'realtime',\n          height: 350,\n          type: 'line',\n          animations: {\n            enabled: true,\n            easing: 'linear',\n            dynamicAnimation: {\n              speed: 1000\n            }\n          },\n          toolbar: {\n            show: false\n          },\n          zoom: {\n            enabled: false\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          curve: 'smooth'\n        },\n        title: {\n          text: 'Dynamic Updating Chart',\n          align: 'left'\n        },\n        markers: {\n          size: 0\n        },\n        xaxis: {\n          type: 'datetime',\n          range: XAXISRANGE\n        },\n        yaxis: {\n          max: 100\n        },\n        legend: {\n          show: false\n        }\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  async getData() {\n    try {\n      const result = await fetch('http://localhost:5000/app');\n      const data = await result.json();\n      data.forEach(function (item, index) {\n        if (item.type === 'Temperature') {\n          setTemperature(item.value);\n        } else if (item.type === 'Breathing') {\n          setBreathing(breathing => [...breathing, item.value]);\n        }\n      });\n    } catch (e) {\n      console.error(e);\n    }\n\n    clearTimeout(timer);\n    setTimer(setTimeout(getData, 500));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Hello, World!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 12\n    }, this);\n  }\n\n} // function App() {\n//   const [temperature, setTemperature] = React.useState(0)\n//   const [breathing, setBreathing] = React.useState([])\n//   const [timer, setTimer] = React.useState(null)\n//   const [isMounted, setIsMounted] = React.useState(false)\n//   async function getData () {\n//     try {\n//       const result = await fetch('http://localhost:5000/app')\n//       const data = await result.json()\n//       data.forEach(function (item, index) {\n//         if (item.type === 'Temperature') {\n//           setTemperature(item.value)\n//         } else if (item.type === 'Breathing') {\n//           setBreathing(breathing => [...breathing, item.value])\n//         }\n//       });\n//     } catch (e) {\n//       console.error(e)\n//     }\n//     clearTimeout(timer)\n//     setTimer(setTimeout(getData, 500))\n//   }\n//   React.useEffect(() => {\n//     getData();\n//   }, []);\n//   const state = {     \n//     series: [{\n//       data: breathing.slice()\n//     }],\n//     options: {\n//       chart: {\n//         id: 'realtime',\n//         height: 350,\n//         type: 'line',\n//         animations: {\n//           enabled: true,\n//           easing: 'linear',\n//           dynamicAnimation: {\n//             speed: 1000\n//           }\n//         },\n//         toolbar: {\n//           show: false\n//         },\n//         zoom: {\n//           enabled: false\n//         }\n//       },\n//       dataLabels: {\n//         enabled: false\n//       },\n//       stroke: {\n//         curve: 'smooth'\n//       },\n//       title: {\n//         text: 'Breathing Rate',\n//         align: 'left'\n//       },\n//       markers: {\n//         size: 0\n//       },\n//       // xaxis: {\n//       //   type: 'datetime',\n//       //   range: XAXISRANGE,\n//       // },\n//       // yaxis: {\n//       //   max: 100\n//       // },\n//       legend: {\n//         show: false\n//       },\n//     },\n//   };\n//   return (\n//     <ChakraProvider theme={theme}>\n//       <Box textAlign=\"center\" fontSize=\"xl\">\n//         <Grid minH=\"100vh\" p={3}>\n//           <ColorModeSwitcher justifySelf=\"flex-end\" />\n//           <VStack spacing={8}>\n//             <p>Temperature: {temperature}</p>\n//             <p>Breathing: {breathing}</p>\n//             {/* Create line graph of breathing using ApexChart*/}\n//             <ReactApexChart options={state.options} series={state.series} type=\"line\" height={350} />\n//           </VStack>\n//         </Grid>\n//       </Box>\n//     </ChakraProvider>\n//   );\n// }\n\n\nexport default App;","map":{"version":3,"sources":["/Users/sumant/Desktop/work/beep/client/src/App.js"],"names":["React","ChakraProvider","Box","Text","Link","VStack","Code","Grid","theme","ColorModeSwitcher","ReactApexChart","App","Component","constructor","props","state","temperature","breathing","timer","series","data","slice","options","chart","id","height","type","animations","enabled","easing","dynamicAnimation","speed","toolbar","show","zoom","dataLabels","stroke","curve","title","text","align","markers","size","xaxis","range","XAXISRANGE","yaxis","max","legend","componentDidMount","getData","result","fetch","json","forEach","item","index","setTemperature","value","setBreathing","e","console","error","clearTimeout","setTimer","setTimeout","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  ChakraProvider,\n  Box,\n  Text,\n  Link,\n  VStack,\n  Code,\n  Grid,\n  theme,\n} from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\n\nimport ReactApexChart from 'apexcharts';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      temperature: 0,\n      breathing: [],\n      timer: 0,\n      series: [{\n        data: this.breathing.slice()\n      }],\n      options: {\n        chart: {\n          id: 'realtime',\n          height: 350,\n          type: 'line',\n          animations: {\n            enabled: true,\n            easing: 'linear',\n            dynamicAnimation: {\n              speed: 1000\n            }\n          },\n          toolbar: {\n            show: false\n          },\n          zoom: {\n            enabled: false\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        stroke: {\n          curve: 'smooth'\n        },\n        title: {\n          text: 'Dynamic Updating Chart',\n          align: 'left'\n        },\n        markers: {\n          size: 0\n        },\n        xaxis: {\n          type: 'datetime',\n          range: XAXISRANGE,\n        },\n        yaxis: {\n          max: 100\n        },\n        legend: {\n          show: false\n        },\n      },\n    }\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  async getData () {\n    try {\n      const result = await fetch('http://localhost:5000/app')\n      const data = await result.json()\n      data.forEach(function (item, index) {\n        if (item.type === 'Temperature') {\n          setTemperature(item.value)\n        } else if (item.type === 'Breathing') {\n          setBreathing(breathing => [...breathing, item.value])\n\n        }\n      });\n    } catch (e) {\n      console.error(e)\n    }\n    clearTimeout(timer)\n    setTimer(setTimeout(getData, 500))\n  }\n\n\n  render() {\n    return <h1>Hello, World!</h1>\n  }\n}\n\n// function App() {\n//   const [temperature, setTemperature] = React.useState(0)\n//   const [breathing, setBreathing] = React.useState([])\n//   const [timer, setTimer] = React.useState(null)\n//   const [isMounted, setIsMounted] = React.useState(false)\n\n//   async function getData () {\n//     try {\n//       const result = await fetch('http://localhost:5000/app')\n//       const data = await result.json()\n//       data.forEach(function (item, index) {\n//         if (item.type === 'Temperature') {\n//           setTemperature(item.value)\n//         } else if (item.type === 'Breathing') {\n//           setBreathing(breathing => [...breathing, item.value])\n\n//         }\n//       });\n//     } catch (e) {\n//       console.error(e)\n//     }\n//     clearTimeout(timer)\n//     setTimer(setTimeout(getData, 500))\n//   }\n  \n//   React.useEffect(() => {\n//     getData();\n//   }, []);\n\n//   const state = {     \n//     series: [{\n//       data: breathing.slice()\n//     }],\n//     options: {\n//       chart: {\n//         id: 'realtime',\n//         height: 350,\n//         type: 'line',\n//         animations: {\n//           enabled: true,\n//           easing: 'linear',\n//           dynamicAnimation: {\n//             speed: 1000\n//           }\n//         },\n//         toolbar: {\n//           show: false\n//         },\n//         zoom: {\n//           enabled: false\n//         }\n//       },\n//       dataLabels: {\n//         enabled: false\n//       },\n//       stroke: {\n//         curve: 'smooth'\n//       },\n//       title: {\n//         text: 'Breathing Rate',\n//         align: 'left'\n//       },\n//       markers: {\n//         size: 0\n//       },\n//       // xaxis: {\n//       //   type: 'datetime',\n//       //   range: XAXISRANGE,\n//       // },\n//       // yaxis: {\n//       //   max: 100\n//       // },\n//       legend: {\n//         show: false\n//       },\n//     },\n//   };\n\n//   return (\n//     <ChakraProvider theme={theme}>\n//       <Box textAlign=\"center\" fontSize=\"xl\">\n//         <Grid minH=\"100vh\" p={3}>\n//           <ColorModeSwitcher justifySelf=\"flex-end\" />\n//           <VStack spacing={8}>\n//             <p>Temperature: {temperature}</p>\n//             <p>Breathing: {breathing}</p>\n//             {/* Create line graph of breathing using ApexChart*/}\n//             <ReactApexChart options={state.options} series={state.series} type=\"line\" height={350} />\n//           </VStack>\n//         </Grid>\n//       </Box>\n//     </ChakraProvider>\n//   );\n// }\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}