{"ast":null,"code":"var _jsxFileName = \"/Users/sumant/Desktop/work/beep/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { ChakraProvider, Box, Text, Link, VStack, Code, Grid, theme } from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport { Line } from 'react-chartjs-2';\nimport { makeStyles, useTheme } from '@material-ui/core';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [temperature, setTemperature] = React.useState(0);\n  const [breathing, setBreathing] = React.useState([]);\n  const [timer, setTimer] = React.useState(null);\n\n  async function getData() {\n    try {\n      const result = await fetch('http://localhost:5000/app');\n      const data = await result.json();\n      data.forEach(function (item, index) {\n        if (item.type === 'Temperature') {\n          setTemperature(item.value);\n        } else if (item.type === 'Breathing') {\n          setBreathing(breathing => [...breathing, item.value]);\n        }\n      });\n    } catch (e) {\n      console.error(e);\n    }\n\n    clearTimeout(timer);\n    setTimer(setTimeout(getData, 500));\n  }\n\n  React.useEffect(() => {\n    getData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ChakraProvider, {\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      textAlign: \"center\",\n      fontSize: \"xl\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        minH: \"100vh\",\n        p: 3,\n        children: [/*#__PURE__*/_jsxDEV(ColorModeSwitcher, {\n          justifySelf: \"flex-end\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(VStack, {\n          spacing: 8,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Temperature: \", temperature]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            datasetIdKey: \"id\",\n            data: {\n              labels: ['Jun', 'Jul', 'Aug'],\n              datasets: [{\n                id: 1,\n                label: '',\n                data: [5, 6, 7]\n              }, {\n                id: 2,\n                label: '',\n                data: [3, 2, 1]\n              }]\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"ybEd0sdH4c7Zrd6K7pofF+MCUfU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sumant/Desktop/work/beep/client/src/App.js"],"names":["React","ChakraProvider","Box","Text","Link","VStack","Code","Grid","theme","ColorModeSwitcher","Line","makeStyles","useTheme","App","temperature","setTemperature","useState","breathing","setBreathing","timer","setTimer","getData","result","fetch","data","json","forEach","item","index","type","value","e","console","error","clearTimeout","setTimeout","useEffect","labels","datasets","id","label"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  ChakraProvider,\n  Box,\n  Text,\n  Link,\n  VStack,\n  Code,\n  Grid,\n  theme,\n} from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\n\nimport { Line } from 'react-chartjs-2';\nimport { makeStyles, useTheme } from '@material-ui/core';\n\nfunction App() {\n  const [temperature, setTemperature] = React.useState(0)\n  const [breathing, setBreathing] = React.useState([])\n  const [timer, setTimer] = React.useState(null)\n\n  async function getData() {\n    try {\n      const result = await fetch('http://localhost:5000/app')\n      const data = await result.json()\n      data.forEach(function (item, index) {\n        if (item.type === 'Temperature') {\n          setTemperature(item.value)\n        } else if (item.type === 'Breathing') {\n          setBreathing(breathing => [...breathing, item.value])\n        }\n      });\n    } catch (e) {\n      console.error(e)\n    }\n\n    clearTimeout(timer)\n    setTimer(setTimeout(getData, 500))\n  }\n  \n  React.useEffect(() => {\n    getData();\n  }, []);\n  \n  return (\n    <ChakraProvider theme={theme}>\n      <Box textAlign=\"center\" fontSize=\"xl\">\n        <Grid minH=\"100vh\" p={3}>\n          <ColorModeSwitcher justifySelf=\"flex-end\" />\n          <VStack spacing={8}>\n            <p>Temperature: {temperature}</p>\n            {/* <p>Breathing: {breathing}</p>s */}\n            <Line\n              datasetIdKey='id'\n              data={{\n                labels: ['Jun', 'Jul', 'Aug'],\n                datasets: [\n                  {\n                    id: 1,\n                    label: '',\n                    data: [5, 6, 7],\n                  },\n                  {\n                    id: 2,\n                    label: '',\n                    data: [3, 2, 1],\n                  },\n                ],\n              }}\n            />\n          </VStack>\n        </Grid>\n      </Box>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}