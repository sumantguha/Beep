{"ast":null,"code":"var _jsxFileName = \"/Users/sumant/Desktop/work/beep/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { ChakraProvider, Box, Text, Link, VStack, Code, Grid, theme } from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(ChakraProvider, {\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      textAlign: \"center\",\n      fontSize: \"xl\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        minH: \"100vh\",\n        p: 3,\n        children: [/*#__PURE__*/_jsxDEV(ColorModeSwitcher, {\n          justifySelf: \"flex-end\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(VStack, {\n          spacing: 8,\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Hello, World\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\n\nasync function getData() {\n  try {\n    const result = await fetch('localhost:5000/app');\n    const data = await result.json();\n    console.log(data);\n  } catch (e) {\n    console.error(e);\n  }\n\n  clearTimeout(timer);\n  setTimer(setTimeout(updateDevicePosition, 200));\n}\n\nReact.useEffect(_s(() => {\n  _s();\n\n  const [state, setState] = React.useState(0);\n  const [timer, setTimer] = React.useState(null);\n  const [isMounted, setIsMounted] = React.useState(false);\n  getData(state, setState, timer, setTimer, isMounted, setIsMounted);\n}, \"7Ozsz4ufewx35mjXh6l/5zmLMTE=\"), []);\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sumant/Desktop/work/beep/client/src/App.js"],"names":["React","ChakraProvider","Box","Text","Link","VStack","Code","Grid","theme","ColorModeSwitcher","App","getData","result","fetch","data","json","console","log","e","error","clearTimeout","timer","setTimer","setTimeout","updateDevicePosition","useEffect","state","setState","useState","isMounted","setIsMounted"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACEC,cADF,EAEEC,GAFF,EAGEC,IAHF,EAIEC,IAJF,EAKEC,MALF,EAMEC,IANF,EAOEC,IAPF,EAQEC,KARF,QASO,kBATP;AAUA,SAASC,iBAAT,QAAkC,qBAAlC;;;AAEA,SAASC,GAAT,GAAe;AACb,sBACE,QAAC,cAAD;AAAgB,IAAA,KAAK,EAAEF,KAAvB;AAAA,2BACE,QAAC,GAAD;AAAK,MAAA,SAAS,EAAC,QAAf;AAAwB,MAAA,QAAQ,EAAC,IAAjC;AAAA,6BACE,QAAC,IAAD;AAAM,QAAA,IAAI,EAAC,OAAX;AAAmB,QAAA,CAAC,EAAE,CAAtB;AAAA,gCACE,QAAC,iBAAD;AAAmB,UAAA,WAAW,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAE,CAAjB;AAAA,iCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;KAbQE,G;;AAeT,eAAeC,OAAf,GAA0B;AACxB,MAAI;AACF,UAAMC,MAAM,GAAG,MAAMC,KAAK,CAAC,oBAAD,CAA1B;AACA,UAAMC,IAAI,GAAG,MAAMF,MAAM,CAACG,IAAP,EAAnB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACD,GAJD,CAIE,OAAOI,CAAP,EAAU;AACVF,IAAAA,OAAO,CAACG,KAAR,CAAcD,CAAd;AACD;;AACDE,EAAAA,YAAY,CAACC,KAAD,CAAZ;AACAC,EAAAA,QAAQ,CAACC,UAAU,CAACC,oBAAD,EAAuB,GAAvB,CAAX,CAAR;AACD;;AAEDxB,KAAK,CAACyB,SAAN,IAAgB,MAAM;AAAA;;AACpB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoB3B,KAAK,CAAC4B,QAAN,CAAe,CAAf,CAA1B;AACA,QAAM,CAACP,KAAD,EAAQC,QAAR,IAAoBtB,KAAK,CAAC4B,QAAN,CAAe,IAAf,CAA1B;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4B9B,KAAK,CAAC4B,QAAN,CAAe,KAAf,CAAlC;AACAjB,EAAAA,OAAO,CAACe,KAAD,EAAQC,QAAR,EAAkBN,KAAlB,EAAyBC,QAAzB,EAAmCO,SAAnC,EAA8CC,YAA9C,CAAP;AACD,CALD,mCAKG,EALH;AAOA,eAAepB,GAAf","sourcesContent":["import React from 'react';\nimport {\n  ChakraProvider,\n  Box,\n  Text,\n  Link,\n  VStack,\n  Code,\n  Grid,\n  theme,\n} from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\n\nfunction App() {\n  return (\n    <ChakraProvider theme={theme}>\n      <Box textAlign=\"center\" fontSize=\"xl\">\n        <Grid minH=\"100vh\" p={3}>\n          <ColorModeSwitcher justifySelf=\"flex-end\" />\n          <VStack spacing={8}>\n            <h1>Hello, World</h1>\n          </VStack>\n        </Grid>\n      </Box>\n    </ChakraProvider>\n  );\n}\n\nasync function getData () {\n  try {\n    const result = await fetch('localhost:5000/app')\n    const data = await result.json()\n    console.log(data)\n  } catch (e) {\n    console.error(e)\n  }\n  clearTimeout(timer)\n  setTimer(setTimeout(updateDevicePosition, 200))\n}\n\nReact.useEffect(() => {\n  const [state, setState] = React.useState(0)\n  const [timer, setTimer] = React.useState(null)\n  const [isMounted, setIsMounted] = React.useState(false)\n  getData(state, setState, timer, setTimer, isMounted, setIsMounted);\n}, []);\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}