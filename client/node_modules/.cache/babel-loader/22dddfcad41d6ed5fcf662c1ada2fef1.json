{"ast":null,"code":"var _jsxFileName = \"/Users/sumant/Desktop/work/beep/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { ChakraProvider, Box, Text, Link, VStack, Code, Grid, theme } from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport ReactApexChart from 'apexcharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [temperature, setTemperature] = React.useState(0);\n  const [breathing, setBreathing] = React.useState([]);\n  const [timer, setTimer] = React.useState(null); // Draw a real time graph of breathing\n\n  const drawBreathing = () => {\n    const options = {\n      chart: {\n        type: 'line',\n        height: 200,\n        zoom: {\n          enabled: false\n        }\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        curve: 'smooth'\n      },\n      series: [{\n        name: 'Breathing',\n        data: breathing\n      }],\n      xaxis: {\n        type: 'datetime',\n        categories: []\n      },\n      yaxis: {\n        max: 10,\n        min: 0,\n        tickAmount: 10\n      },\n      tooltip: {\n        x: {\n          format: 'dd/MM/yy HH:mm'\n        }\n      }\n    };\n    const chart = new ReactApexChart(document.querySelector('#breathing'), options);\n    chart.render();\n  };\n\n  async function getData() {\n    try {\n      const result = await fetch('http://localhost:5000/app');\n      const data = await result.json();\n      data.forEach(function (item, index) {\n        if (item.type === 'Temperature') {\n          setTemperature(item.value);\n        } else if (item.type === 'Breathing') {\n          setBreathing(breathing => [...breathing, item.value]);\n          drawBreathing();\n        }\n      });\n    } catch (e) {\n      console.error(e);\n    }\n\n    clearTimeout(timer);\n    setTimer(setTimeout(getData, 500));\n  }\n\n  React.useEffect(() => {\n    getData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ChakraProvider, {\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      textAlign: \"center\",\n      fontSize: \"xl\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        minH: \"100vh\",\n        p: 3,\n        children: [/*#__PURE__*/_jsxDEV(ColorModeSwitcher, {\n          justifySelf: \"flex-end\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(VStack, {\n          spacing: 8,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Temperature: \", temperature]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"breathing\",\n            style: {\n              height: 400,\n              width: 600\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"ybEd0sdH4c7Zrd6K7pofF+MCUfU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sumant/Desktop/work/beep/client/src/App.js"],"names":["React","ChakraProvider","Box","Text","Link","VStack","Code","Grid","theme","ColorModeSwitcher","ReactApexChart","App","temperature","setTemperature","useState","breathing","setBreathing","timer","setTimer","drawBreathing","options","chart","type","height","zoom","enabled","dataLabels","stroke","curve","series","name","data","xaxis","categories","yaxis","max","min","tickAmount","tooltip","x","format","document","querySelector","render","getData","result","fetch","json","forEach","item","index","value","e","console","error","clearTimeout","setTimeout","useEffect","width"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  ChakraProvider,\n  Box,\n  Text,\n  Link,\n  VStack,\n  Code,\n  Grid,\n  theme,\n} from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\n\nimport ReactApexChart from 'apexcharts';\n\nfunction App() {\n  const [temperature, setTemperature] = React.useState(0)\n  const [breathing, setBreathing] = React.useState([])\n  const [timer, setTimer] = React.useState(null)\n\n  // Draw a real time graph of breathing\n  const drawBreathing = () => {\n    const options = {\n      chart: {\n        type: 'line',\n        height: 200,\n        zoom: {\n          enabled: false,\n        },\n      },\n      dataLabels: {\n        enabled: false,\n      },\n      stroke: {\n        curve: 'smooth',\n      },\n      series: [\n        {\n          name: 'Breathing',\n          data: breathing,\n        },\n      ],\n      xaxis: {\n        type: 'datetime',\n        categories: [],\n      },\n      yaxis: {\n        max: 10,\n        min: 0,\n        tickAmount: 10,\n      },\n      tooltip: {\n        x: {\n          format: 'dd/MM/yy HH:mm',\n        },\n      },\n    };\n\n    const chart = new ReactApexChart(document.querySelector('#breathing'), options);\n    chart.render();\n  } \n\n  async function getData() {\n    try {\n      const result = await fetch('http://localhost:5000/app')\n      const data = await result.json()\n      data.forEach(function (item, index) {\n        if (item.type === 'Temperature') {\n          setTemperature(item.value)\n        } else if (item.type === 'Breathing') {\n          setBreathing(breathing => [...breathing, item.value])\n          drawBreathing();\n        }\n      });\n    } catch (e) {\n      console.error(e)\n    }\n\n    clearTimeout(timer)\n    setTimer(setTimeout(getData, 500))\n  }\n  \n  React.useEffect(() => {\n    getData();\n  }, []);\n  \n  return (\n    <ChakraProvider theme={theme}>\n      <Box textAlign=\"center\" fontSize=\"xl\">\n        <Grid minH=\"100vh\" p={3}>\n          <ColorModeSwitcher justifySelf=\"flex-end\" />\n          <VStack spacing={8}>\n            <p>Temperature: {temperature}</p>\n            {/* <p>Breathing: {breathing}</p>s */}\n            {/* Create line graph of breathing using ApexChart*/}\n            {/* <ReactApexChart options={state.options} series={state.series} type=\"line\" height={350} /> */}\n            <div id=\"breathing\" style={{height:400, width:600}} />\n          </VStack>\n        </Grid>\n      </Box>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}