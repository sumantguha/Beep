{"ast":null,"code":"var _jsxFileName = \"/Users/sumant/Desktop/work/beep/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { ChakraProvider, Box, VStack, Grid, theme } from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport { Line } from \"react-chartjs-2\";\nimport \"chartjs-plugin-streaming\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [temperature, setTemperature] = React.useState(0);\n  const [breathing, setBreathing] = React.useState(0);\n  const [timer, setTimer] = React.useState(null);\n\n  async function getData() {\n    try {\n      const result = await fetch('http://localhost:5000/app');\n      const data = await result.json();\n      data.forEach(function (item, index) {\n        console.log(item);\n\n        if (item.type === 'Temperature') {\n          setTemperature(item.value);\n        } else if (item.type === 'Breathing') {\n          setBreathing(item.value);\n        }\n      });\n    } catch (e) {\n      console.error(e);\n    }\n\n    clearTimeout(timer);\n    setTimer(setTimeout(getData, 500));\n  }\n\n  React.useEffect(() => {\n    getData();\n  }, []);\n  const data = {\n    datasets: [{\n      label: \"Breathing Rated\",\n      borderColor: \"rgb(255, 99, 132)\",\n      backgroundColor: \"rgba(255, 99, 132, 0.5)\",\n      lineTension: 0,\n      borderDash: [8, 4],\n      data: []\n    }]\n  };\n  const options = {\n    scales: {\n      xAxes: [{\n        type: \"realtime\",\n        realtime: {\n          onRefresh: function () {\n            data.datasets[0].data.push({\n              x: Date.now(),\n              y: breathing\n            });\n          },\n          delay: 500\n        }\n      }]\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ChakraProvider, {\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      textAlign: \"center\",\n      fontSize: \"xl\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        minH: \"100vh\",\n        p: 3,\n        children: [/*#__PURE__*/_jsxDEV(ColorModeSwitcher, {\n          justifySelf: \"flex-end\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(VStack, {\n          spacing: 8,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Temperature: \", temperature]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Breathing: \", breathing]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this), \"s\", /*#__PURE__*/_jsxDEV(Line, {\n            data: data,\n            options: options\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"FojVqqAwaBKu3OLIBukjJUodo3c=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sumant/Desktop/work/beep/client/src/App.js"],"names":["React","ChakraProvider","Box","VStack","Grid","theme","ColorModeSwitcher","Line","App","temperature","setTemperature","useState","breathing","setBreathing","timer","setTimer","getData","result","fetch","data","json","forEach","item","index","console","log","type","value","e","error","clearTimeout","setTimeout","useEffect","datasets","label","borderColor","backgroundColor","lineTension","borderDash","options","scales","xAxes","realtime","onRefresh","push","x","Date","now","y","delay"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  ChakraProvider,\n  Box,\n  VStack,\n  Grid,\n  theme,\n} from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\n\nimport { Line } from \"react-chartjs-2\";\nimport \"chartjs-plugin-streaming\";\n\n\nfunction App() {\n  const [temperature, setTemperature] = React.useState(0)\n  const [breathing, setBreathing] = React.useState(0)\n  const [timer, setTimer] = React.useState(null)\n\n  async function getData() {\n    try {\n      const result = await fetch('http://localhost:5000/app')\n      const data = await result.json()\n      data.forEach(function (item, index) {\n        console.log(item)\n        if (item.type === 'Temperature') {\n          setTemperature(item.value)\n        } else if (item.type === 'Breathing') {\n          setBreathing(item.value)\n        }\n      });\n    } catch (e) {\n      console.error(e)\n    }\n\n    clearTimeout(timer)\n    setTimer(setTimeout(getData, 500))\n  }\n  \n  React.useEffect(() => {\n    getData();\n  }, []);\n\n\n  const data = {\n    datasets: [\n      {\n        label: \"Breathing Rated\",\n        borderColor: \"rgb(255, 99, 132)\",\n        backgroundColor: \"rgba(255, 99, 132, 0.5)\",\n        lineTension: 0,\n        borderDash: [8, 4],\n        data: []\n      }\n    ]\n  };\n\n  const options = {\n    scales: {\n      xAxes: [\n        {\n          type: \"realtime\",\n          realtime: {\n            onRefresh: function() {\n              data.datasets[0].data.push({\n                x: Date.now(),\n                y: breathing\n              });\n            },\n            delay: 500\n          }\n        }\n      ]\n    }\n  };\n  \n  return (\n    <ChakraProvider theme={theme}>\n      <Box textAlign=\"center\" fontSize=\"xl\">\n        <Grid minH=\"100vh\" p={3}>\n          <ColorModeSwitcher justifySelf=\"flex-end\" />\n          <VStack spacing={8}>\n            <p>Temperature: {temperature}</p>\n            <p>Breathing: {breathing}</p>s\n            <Line data={data} options={options} />\n          </VStack>\n        </Grid>\n      </Box>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}