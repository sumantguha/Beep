{"ast":null,"code":"var _jsxFileName = \"/Users/sumant/Desktop/work/beep/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { ChakraProvider, Box, Text, Link, VStack, Code, Grid, theme } from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport ReactApexChart from 'apexcharts'; // class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n//   }\n//   render() {\n//     return <h1>Hello, World!</h1>\n//   }\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [temperature, setTemperature] = React.useState(0);\n  const [breathing, setBreathing] = React.useState([]);\n  const [timer, setTimer] = React.useState(null);\n  const [isMounted, setIsMounted] = React.useState(false);\n\n  async function getData() {\n    try {\n      const result = await fetch('http://localhost:5000/app');\n      const data = await result.json();\n      data.forEach(function (item, index) {\n        if (item.type === 'Temperature') {\n          setTemperature(item.value);\n        } else if (item.type === 'Breathing') {\n          setBreathing(breathing => [...breathing, item.value]);\n        }\n      });\n    } catch (e) {\n      console.error(e);\n    }\n\n    clearTimeout(timer);\n    setTimer(setTimeout(getData, 500));\n  }\n\n  React.useEffect(() => {\n    getData();\n  }, []);\n  const state = {\n    series: [{\n      data: breathing.slice()\n    }],\n    options: {\n      chart: {\n        id: 'realtime',\n        height: 350,\n        type: 'line',\n        animations: {\n          enabled: true,\n          easing: 'linear',\n          dynamicAnimation: {\n            speed: 1000\n          }\n        },\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        }\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        curve: 'smooth'\n      },\n      title: {\n        text: 'Breathing Rate',\n        align: 'left'\n      },\n      markers: {\n        size: 0\n      },\n      // xaxis: {\n      //   type: 'datetime',\n      //   range: XAXISRANGE,\n      // },\n      // yaxis: {\n      //   max: 100\n      // },\n      legend: {\n        show: false\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ChakraProvider, {\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      textAlign: \"center\",\n      fontSize: \"xl\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        minH: \"100vh\",\n        p: 3,\n        children: [/*#__PURE__*/_jsxDEV(ColorModeSwitcher, {\n          justifySelf: \"flex-end\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(VStack, {\n          spacing: 8,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Temperature: \", temperature]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Breathing: \", breathing]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ReactApexChart, {\n            options: state.options,\n            series: state.series,\n            type: \"line\",\n            height: 350\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Z/rs0MyJJlo9vXE745GKndmPWxY=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/sumant/Desktop/work/beep/client/src/App.js"],"names":["React","ChakraProvider","Box","Text","Link","VStack","Code","Grid","theme","ColorModeSwitcher","ReactApexChart","App","temperature","setTemperature","useState","breathing","setBreathing","timer","setTimer","isMounted","setIsMounted","getData","result","fetch","data","json","forEach","item","index","type","value","e","console","error","clearTimeout","setTimeout","useEffect","state","series","slice","options","chart","id","height","animations","enabled","easing","dynamicAnimation","speed","toolbar","show","zoom","dataLabels","stroke","curve","title","text","align","markers","size","legend"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  ChakraProvider,\n  Box,\n  Text,\n  Link,\n  VStack,\n  Code,\n  Grid,\n  theme,\n} from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\n\nimport ReactApexChart from 'apexcharts';\n\n// class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n//   }\n\n//   render() {\n//     return <h1>Hello, World!</h1>\n//   }\n// }\n\nfunction App() {\n  const [temperature, setTemperature] = React.useState(0)\n  const [breathing, setBreathing] = React.useState([])\n  const [timer, setTimer] = React.useState(null)\n  const [isMounted, setIsMounted] = React.useState(false)\n\n  async function getData () {\n    try {\n      const result = await fetch('http://localhost:5000/app')\n      const data = await result.json()\n      data.forEach(function (item, index) {\n        if (item.type === 'Temperature') {\n          setTemperature(item.value)\n        } else if (item.type === 'Breathing') {\n          setBreathing(breathing => [...breathing, item.value])\n\n        }\n      });\n    } catch (e) {\n      console.error(e)\n    }\n    clearTimeout(timer)\n    setTimer(setTimeout(getData, 500))\n  }\n  \n  React.useEffect(() => {\n    getData();\n  }, []);\n\n  const state = {     \n    series: [{\n      data: breathing.slice()\n    }],\n    options: {\n      chart: {\n        id: 'realtime',\n        height: 350,\n        type: 'line',\n        animations: {\n          enabled: true,\n          easing: 'linear',\n          dynamicAnimation: {\n            speed: 1000\n          }\n        },\n        toolbar: {\n          show: false\n        },\n        zoom: {\n          enabled: false\n        }\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        curve: 'smooth'\n      },\n      title: {\n        text: 'Breathing Rate',\n        align: 'left'\n      },\n      markers: {\n        size: 0\n      },\n      // xaxis: {\n      //   type: 'datetime',\n      //   range: XAXISRANGE,\n      // },\n      // yaxis: {\n      //   max: 100\n      // },\n      legend: {\n        show: false\n      },\n    },\n  };\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Box textAlign=\"center\" fontSize=\"xl\">\n        <Grid minH=\"100vh\" p={3}>\n          <ColorModeSwitcher justifySelf=\"flex-end\" />\n          <VStack spacing={8}>\n            <p>Temperature: {temperature}</p>\n            <p>Breathing: {breathing}</p>\n            {/* Create line graph of breathing using ApexChart*/}\n            <ReactApexChart options={state.options} series={state.series} type=\"line\" height={350} />\n          </VStack>\n        </Grid>\n      </Box>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}